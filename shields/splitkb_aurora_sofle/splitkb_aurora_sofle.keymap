/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/ext_power.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <35>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <29>; // Uncomment if using only per-key LEDs.
};
 */

#define DEF_L 0
#define SYM_L 1

/ {
    // cond_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri {
    //       if-layers = <NUM_L SYM_L>;
    //       then-layer = <MED_L>;
    //     };
    // };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5    |                   |  6    |  7    |  8    |  9   |   0   |   -   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T    |                   |  Y    |  U    |  I    |  O   |   P   |   [   |
// |  CTRL |  A  |  S  |  D   |  F   |  G    |                   |  H    |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B    |        |  |       |  N    |  M    |  ,    |  .   |   /   | SHIFT |
//               |CTRL | ALT  | GUI  | SYM_L |  SPACE |  | ENTER | SYM_L | BSPC  | GUI   | RALT |
            bindings = <
&kp ESC   &kp N1 &kp N2    &kp N3   &kp N4   &kp N5                         &kp N6      &kp N7    &kp N8    &kp N9   &kp N0   &kp MINUS
&kp TAB   &kp Q  &kp W     &kp E    &kp R    &kp T                          &kp Y       &kp U     &kp I     &kp O    &kp P    &kp LEFT_BRACKET 
&kp LCTRL &kp A  &kp S     &kp D    &kp F    &kp G                          &kp H       &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&kp LSHFT &kp Z  &kp X     &kp C    &kp V    &kp B      &trans     &trans   &kp N       &kp M     &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
                 &kp LCTRL &kp LALT &kp LGUI &mo SYM_L  &kp SPACE  &kp RET  &to SYM_L   &kp BSPC  &kp RGUI  &kp RALT
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        sym_layer {
// ------------------------------------------------------------------------------------------------------------
// |   `   |  F2  |   F3  |  F4   |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |   =   |
// |       |  F1  | BTCLR | BT1   | BT2  |  BT3 |                   |      |       |       |      |  F12  |   ]   |
// |       | PSCRN| PLAY  | MUTE  |      |      |                   |  ←   |   ↓   |   ↑   |  →   |       |   \   |
// |       | PREV | VOL_DN| VOL_UP| NEXT |      |        |  |       | HOME | PG_DN | PG_UP | END  |       |       |
//                |       |       |      |      |        |  |       |      |       |       |      |
            bindings = <
&kp GRAVE  &kp F2     &kp F3            &kp F4       &kp F5       &kp F6                       &kp F7     &kp F8     &kp F9     &kp F10     &kp F11   &kp EQUAL
// &trans     &kp F1     &bt BT_CLR        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2                 &trans     &trans     &trans     &trans      &kp F12   &kp RIGHT_BRACKET
&trans     &kp F1     &trans            &trans       &trans       &trans                       &trans     &trans     &trans     &trans      &kp F12   &kp RIGHT_BRACKET
&trans     &kp PSCRN  &kp C_PLAY_PAUSE  &kp C_MUTE   &trans       &trans                       &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT   &trans    &kp BACKSLASH
&trans     &kp C_PREV &kp C_VOL_DN      &kp C_VOL_UP &kp C_NEXT   &trans       &trans &trans   &kp HOME   &kp PG_DN  &kp PG_UP  &kp END     &trans    &trans
                      &trans            &trans       &trans       &mo DEF_L    &trans &trans   &to DEF_L  &trans     &trans     &trans
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};

