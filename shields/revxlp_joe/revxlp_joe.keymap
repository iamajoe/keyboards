/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>

// these will be copied on the build process
#include "./helpers/keypos_42keys.h"
#include "./helpers/zmk_nodefree.h"

#define SYM_L 1
#define NUM_L 2
#define MED_L 3

#define LEFT_HAND = LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define RIGHT_HAND = RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS = LH0 LH1 LH2 RH0 RH1 RH2 

// TODO: setup the hyper
// #define HYPER LGUI(LSHFT(LCTRL(LALT(keycode))))

// COMBOS
ZMK_COMBO(bootloader_combo, &bootloader, LT5 RT0, MED_L)

// TAPDANCES
ZMK_BEHAVIOR(q_esc, tap_dance,
  tapping-term-ms = <200>;
  bindings = <&kp Q>, <&kp ESC>;
)
ZMK_BEHAVIOR(e_find, tap_dance,
  tapping-term-ms = <200>;
  bindings = <&kp E>, <&kp K_FIND>;
)
ZMK_BEHAVIOR(y_redo, tap_dance,
  tapping-term-ms = <200>;
  bindings = <&kp Y>, <&kp K_REDO>;
)
ZMK_BEHAVIOR(z_undo, tap_dance,
  tapping-term-ms = <200>;
  bindings = <&kp Z>, <&kp K_UNDO>;
)
ZMK_BEHAVIOR(x_cut, tap_dance,
  tapping-term-ms = <200>;
  bindings = <&kp X>, <&kp K_CUT>;
)
ZMK_BEHAVIOR(c_copy, tap_dance,
  tapping-term-ms = <200>;
  bindings = <&kp C>, <&kp K_COPY>;
)
ZMK_BEHAVIOR(v_paste, tap_dance,
  tapping-term-ms = <200>;
  bindings = <&kp V>, <&kp K_PASTE>;
)

// CONDITIONAL
ZMK_CONDITIONAL_LAYER(NUM_L SYM_L, MED_L)

// BEHAVIORS
// REF: https://github.com/folke/zmk-config/blob/main/config/includes/mods.dtsi
// REF: https://github.com/urob/zmk-config
// #binding-cells = <2>; 
// TODO: nested macros dont work
// hold-trigger-key-positions = <RIGHT_HAND THUMBS>;
ZMK_BEHAVIOR(hml, hold_tap,
  flavor = "balanced"; 
  tapping-term-ms = <280>; 
  quick-tap-ms = <175>; 
  require-prior-idle-ms = <150>; 
  hold-trigger-on-release;
  bindings = <&kp>, <&kp>; 
)

// #binding-cells = <2>; 
// TODO: nested macros dont work
// hold-trigger-key-positions = <LEFT_HAND THUMBS>;
ZMK_BEHAVIOR(hmr, hold_tap,
  flavor = "balanced"; 
  tapping-term-ms = <280>; 
  quick-tap-ms = <175>; 
  require-prior-idle-ms = <150>; 
  hold-trigger-on-release;
  bindings = <&kp>, <&kp>; 
)

// #binding-cells = <2>;
ZMK_BEHAVIOR(blp, hold_tap,
  tapping-term-ms = <3000>;
  bindings = <&bootloader>, <&none>;
)

// UNICODE characters
ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)

// LAYERS
ZMK_LAYER(default_layer,
&none  &q_esc          &kp W            &e_find            &kp R               &kp T            &y_redo         &kp U             &kp I           &kp O             &kp P            &none
&none  &hml LGUI A     &hml LALT S      &hml LCTRL D       &hml LSHFT F        &kp G            &kp H           &hmr LSHFT J      &hmr LCTRL K    &hmr LALT         &hmr LGUI SEMI   &none
&none  &z_undo         &x_cut           &c_copy            &v_paste            &kp B            &kp N           &kp M             &kp COMMA       &kp DOT           &kp SLASH        &none
                                        &lt SYM_L ESC      &lt NUM_L TAB       &lt SYM_L SPACE  &lt NUM_L BSPC  &lt SYM_L RET     &lt NUM_L DEL
)

ZMK_LAYER(sym_layer,
&trans &kp QUESTION    &kp LESS_THAN    &kp AT             &kp GREATER_THAN    &kp GRAVE       &kp AMPERSAND    &kp LEFT_BRACKET  &kp PIPE        &kp RIGHT_BRACKET &kp HASH         &trans
&trans &hml LGUI SQT   &hml LALT CARET  &hml LCTRL PERCENT &hml LSHFT DOLLAR   &kp PLUS        &kp MINUS        &hmr LSHFT LPAR   &hmr LCTRL COLON &hmr LALT RPAR   &hmr LGUI DOLLAR &trans
&trans &kp EXCLAMATION &kp SLASH        &kp ASTERISK       &kp BACKSLASH       &kp TILDE       &kp EQUAL        &kp LBRC          &kp SEMICOLON   &kp RBRC          &euro_sign       &trans
                                        &trans             &trans              &trans          &trans           &trans            &trans
)

ZMK_LAYER(num_layer,
&trans &kp PLUS        &kp N7           &kp N8             &kp N9              &trans          &trans           &trans            &kp COMMA        &kp DOT          &kp ASTERISK     &trans
&trans &hmr LGUI MINUS &hmr LALT N4     &hmr LCTRL N5      &hmr LSHFT N6       &trans          &kp LARW         &hmr LSHFT DARW   &hmr LCTRL UARW  &hmr LALT RARW   &kp SLASH        &trans
&trans &kp EQUAL       &kp N1           &kp N2             &kp N3              &kp N0          &kp HOME         &kp PG_DN         &kp PG_UP        &kp END          &kp EQUAL        &trans
                                        &trans             &trans              &trans          &lt SYM_L DEL    &trans            &trans
)

ZMK_LAYER(media_layer,
&trans &blp 0 0       &kp F7            &kp F8              &kp F9             &kp F10         &trans           &trans            &trans           &trans           &trans           &trans
&trans &trans         &hml LALT F4      &hml LCTRL F5       &hml LSHFT F6      &kp F11         &kp C_PREV       &hmr LSHFT C_VOL_DN &hmr LCTRL C_VOL_UP &hmr LALT C_NEXT &trans      &trans
&trans &trans         &kp F1            &kp F2              &kp F3             &kp F12         &kp PSCRN        &kp C_PLAY_PAUSE  &kp C_MUTE       &trans           &trans           &trans
                                        &trans              &trans             &trans          &trans           &trans            &trans
)
