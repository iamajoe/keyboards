/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>

#define SYM_L 1
#define NUM_L 2
#define MED_L 3
#define FUN_L 4

#define KEYS_L 0 1 2 3 4 5
#define KEYS_R 6 7 8 9 10 11
// TODO: this must be wrong?!
// #define KEYS_T 3 4 5 6 7 8
#define KEYS_T 12

/ {
    tap_dances {
      // ...
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            // hold-trigger-key-positions = <6 7 8 9 10 11>;    // <---[[right-hand keys]]
            hold-trigger-key-positions = <KEYS_R KEYS_T>;

            // REF: https://github.com/folke/zmk-config/blob/main/config/includes/mods.dtsi
            // compatible = "zmk,behavior-hold-tap";
            // #binding-cells = <2>;
            // bindings = <&kp>, <&kp>;
            //
            // flavor = "balanced";
            // tapping-term-ms = <280>;
            // quick-tap-ms = <175>;        // repeat on tap-into-hold
            // // global-quick-tap-ms = <150>;         // requires PR #1387
            // global-quick-tap;
            // hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;       // requires PR #1423
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            // hold-trigger-key-positions = <6 7 8 9 10 11>;    // <---[[right-hand keys]]
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // REF: https://github.com/folke/zmk-config/blob/main/config/includes/mods.dtsi
            // compatible = "zmk,behavior-hold-tap";
            // #binding-cells = <2>;
            // bindings = <&kp>, <&kp>;
            //
            // flavor = "balanced";
            // tapping-term-ms = <280>;
            // quick-tap-ms = <175>;        // repeat on tap-into-hold
            // // global-quick-tap-ms = <150>;         // requires PR #1387
            // global-quick-tap;
            // hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;       // requires PR #1423
        };
    };

    cond_layers {
        compatible = "zmk,conditional-layers";
        tri {
          if-layers = <NUM_L SYM_L>;
          then-layer = <MED_L>;
        };
    };

    combos {
        compatible = "zmk,combos";
        // ...
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&none      &kp Q            &kp W               &kp E               &kp R             &kp T         &kp Y            &kp U          &kp I          &kp O          &kp P          &none
&none      &hml LSFT A      &hml LGUI S         &hml LALT D         &hml LCTL F       &kp G         &kp H            &hmr RCTL J    &hmr RALT K    &hmr LGUI L    &hmr LSFT SEMI &none
&none      &kp Z            &kp X               &kp C               &kp V             &kp B         &kp N            &kp M          &kp COMMA      &kp DOT        &kp SLASH      &none
                                                &mt LCTL ESC        &lt NUM_L DEL     &kp SPACE     &kp BKSPC        &lt SYM_L RET  &mt LGUI TAB
            >;
        };

        sym_layer {
            bindings = <
&trans     &kp LBRC         &kp LBKT            &kp LPAR            &kp EQUAL         &kp ASTERISK  &kp AMPERSAND    &kp SLASH      &kp RPAR       &kp RBKT       &kp RBRC       &trans
&trans     &hml LSFT SQT    &hml LGUI CARET     &hml LALT PERCENT   &hml LCTL DOLLAR  &kp PLUS      &kp MINUS        &hmr RCTL LARW &hmr RALT DARW &hmr LGUI UARW &hmr LSFT RARW &trans
&trans     &kp GRAVE        &kp HASH            &kp AT              &kp EXCLAMATION   &kp BACKSLASH &kp UNDERSCORE   &kp HOME       &kp PG_DN      &kp PG_UP      &kp END        &trans
                                                &trans              &trans            &trans        &trans           &trans         &trans
            >;
        };

        num_layer {
            bindings = <
&trans     &trans           &trans              &trans              &trans            &trans        &kp LESS_THAN    &kp N7         &kp N8         &kp N9         &trans         &trans
&trans     &trans           &trans              &trans              &trans            &trans        &kp GREATER_THAN &hmr RCTL N4   &hmr RALT N5   &hmr LGUI N6   &trans         &trans
&trans     &trans           &trans              &trans              &trans            &trans        &kp N0           &kp N1         &kp N2         &kp N3         &trans         &trans
                                                &trans              &trans            &trans        &trans           &trans         &trans
            >;
        };

        media_layer {
            bindings = <
&trans     &trans           &trans              &trans              &trans            &trans        &trans           &kp F7         &kp F8         &kp F9         &kp F10        &trans
&trans     &hml LSFT C_PREV &hml LGUI C_VOL_DN  &hml LALT C_VOL_UP  &hml LCTL C_NEXT  &trans        &trans           &hmr RCTL F4   &hmr RALT F5   &hmr LGUI F6   &hmr LSFT F11  &trans
&trans     &trans           &kp C_PLAY_PAUSE    &kp C_MUTE          &trans            &trans        &trans           &kp F1         &kp F2         &kp F3         &kp F12        &trans
                                                &trans              &trans            &trans        &trans           &trans         &trans
            >;
        };
    };
};
